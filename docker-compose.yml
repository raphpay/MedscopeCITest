# Docker Compose file for Vapor

volumes:
  db_data:  # Volume for MongoDB data
  uploads:  # Volume for file uploads

x-shared_environment: &shared_environment
  LOG_LEVEL: ${LOG_LEVEL:-debug}
  DATABASE_URL: mongodb://db:27017/vapor_database

services:
  app:
    image: medscope:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
      - file-storage  # Ensure the file-storage service is up before the app
    ports:
      - '8080:8080'
    user: '0'  # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
    command: ["serve", "--env", "production", "--hostname", "0.0.0.0", "--port", "8080"]
    volumes:
      - uploads:/app/Resources/Uploads  # Mount shared volume for uploads

  migrate:
    image: medscope:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
    command: ["migrate", "--yes"]
    deploy:
      replicas: 0

  revert:
    image: medscope:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
    command: ["migrate", "--revert", "--yes"]
    deploy:
      replicas: 0

  db:
    image: mongo:latest
    volumes:
      - db_data:/data/db
    restart: unless-stopped
    ports:
      - '27017:27017'

  file-storage:
    image: alpine  # You can use a minimal image like Alpine for storage
    volumes:
      - uploads:/storage/uploads  # Mount the same uploads volume
    command: ["tail", "-f", "/dev/null"]  # Keep the container running (it doesn't need to do anything)
    restart: unless-stopped